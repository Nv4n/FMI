SET SCHEMA FN24_3MI0700035;

create table CLASSES_DB
(
    EDUYEAR     CHARACTER(9) not null,
    EDUSEMESTER CHARACTER(1) not null,
    CLASSDAY    VARCHAR(10),
    STARTHOUR   TIME         not null,
    ENDHOUR     TIME         not null
);

create trigger TRIG_BEFORE_INSERT_CLASSES
    BEFORE INSERT
    ON CLASSES_DB
    REFERENCING NEW AS N
    FOR EACH ROW
    WHEN (N.ENDHOUR IS NULL)
    SET N.ENDHOUR = N.STARTHOUR + 1 HOUR + 45 MINUTES;

INSERT INTO CLASSES_DB VALUES ('2024','1','IS','12:32',NULL);
select * from CLASSES_DB;


SELECT * FROM SYSCAT.TRIGGERS
WHERE TRIGSCHEMA = 'FN77777';

SELECT * FROM SYSCAT.ROUTINES
WHERE ROUTINESCHEMA LIKE 'FN%';

CREATE TABLE EMP LIKE DB2SAMPLE.EMP;

ALTER TABLE EMP ADD PRIMARY KEY(EMPNO);

INSERT INTO EMP SELECT * FROM DB2SAMPLE.EMP;

CREATE TABLE EMP_SHORT
AS
(SELECT EMPNO, FIRSTNME, MIDINIT, LASTNAME, WORKDEPT  FROM DB2SAMPLE.EMP)
DEFINITION ONLY;

ALTER TABLE EMP_SHORT ADD PRIMARY KEY (EMPNO);

INSERT INTO EMP_SHORT
SELECT EMPNO, FIRSTNME, MIDINIT, LASTNAME, WORKDEPT
FROM DB2SAMPLE.EMP
WHERE WORKDEPT IN ('C01', 'D11', 'A00');

INSERT INTO EMP_SHORT(EMPNO, FIRSTNME, MIDINIT, LASTNAME, WORKDEPT)
               VALUES('400100','Petar', NULL,
                      'Ivanov', 'C01');

CREATE OR REPLACE TRIGGER TRG_BFR_INST_EMP_SHORT
    BEFORE INSERT ON EMP_SHORT
    REFERENCING NEW AS N
    FOR EACH ROW
    WHEN (N.MIDINIT IS NULL)
         SET N.MIDINIT = SUBSTR(N.FIRSTNME, 1, 1);

DROP TABLE EMP_SAL_LOG;

CREATE TABLE EMP_SAL_LOG(
    ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1)
                        NOT NULL PRIMARY KEY ,
    EMPNO CHAR(6),
    OLD_SALARY DECIMAL(9,2),
    NEW_SALARY DECIMAL(9,2),
    CHANGE_DATE TIMESTAMP,
    CHANGE_USER VARCHAR(20)
);

CREATE TRIGGER TRG_AFT_UPD_SAL_EMP
    AFTER UPDATE OF SALARY ON EMP
    REFERENCING OLD AS O NEW AS N
    FOR EACH ROW
      INSERT INTO  EMP_SAL_LOG(EMPNO, OLD_SALARY,
                               NEW_SALARY, CHANGE_DATE, CHANGE_USER)
      VALUES (O.EMPNO, O.SALARY, N.SALARY,
              CURRENT_TIMESTAMP, CURRENT_USER);

-- 2.1. Създайте тригер за таблицата EMP, който при всяка промяна на
-- заплатата на работник обновява заплатата на шефа на този департамент с 10%.
-- Тествайте тригера за департамент 'C01'

CREATE TRIGGER TRG_AFT_UPD_SAL_EMP_MGR
    AFTER UPDATE OF SALARY ON EMP
    REFERENCING OLD AS O NEW AS N
    FOR EACH ROW
    WHEN(O.JOB NOT IN ('MANAGER', 'PRES'))
        UPDATE EMP
        SET SALARY = 1.1 * SALARY
        WHERE WORKDEPT = O.WORKDEPT
        AND JOB IN ('PRES', 'MANAGER');

UPDATE EMP SET SALARY = SALARY + 1000
WHERE EMPNO = '000130';

UPDATE EMP SET SALARY = SALARY + 1000
WHERE EMPNO = '000030';

UPDATE EMP SET SALARY = SALARY
WHERE EMPNO = '000130';

SELECT EMPNO, JOB, SALARY, WORKDEPT
FROM EMP
WHERE WORKDEPT = 'C01';




-- 27.11.2024
SET SCHEMA FN77777;

CREATE TABLE DEPT LIKE DB2SAMPLE.DEPT;

ALTER TABLE DEPT ADD PRIMARY KEY(DEPTNO);

INSERT INTO DEPT
SELECT *
FROM DB2SAMPLE.DEPT;

CREATE TABLE DEPT1
AS
    (SELECT DEPTNO, DEPTNAME, LOCATION
     FROM DB2SAMPLE.DEPT)
DEFINITION ONLY;


-- Създайте тригер за таблицата employee,
-- който при изтриване на ред от таблицата
-- employee, записва номера на работника,
-- име, дата на наемане, заплата и
-- дата на изтриване в таблица employee_del,
-- само за тези работници
-- чиято длъжност е 'MANAGER'.

SELECT * FROM SYSCAT.TRIGGERS;

CREATE TABLE EMP_DEL
    AS
    (SELECT EMPNO, FIRSTNME, LASTNAME,
            HIREDATE, SALARY,
            CURRENT_DATE AS DELDATE
     FROM DB2SAMPLE.EMP)
DEFINITION ONLY;

CREATE TRIGGER TRIG_AFT_DEL_EMP
AFTER DELETE ON EMP
REFERENCING OLD AS O
FOR EACH ROW
WHEN (O.JOB = 'MANAGER')
     INSERT INTO EMP_DEL(EMPNO, FIRSTNME,
       LASTNAME, HIREDATE, SALARY, DELDATE)
    VALUES(O.EMPNO, O.FIRSTNME, O.LASTNAME,
           O.HIREDATE, O.SALARY, CURRENT_DATE);

DELETE FROM EMP
WHERE JOB='MANAGER' AND EMPNO ='000020';

DELETE FROM EMP
WHERE EMPNO ='000120';


CREATE PROCEDURE
    PROC_GET_AGE_BY_DEPTNO(IN P_DEPTNO CHAR(3),
                           OUT P_AGE INT)
BEGIN
    DECLARE MIN_BDATE DATE;
    SET MIN_BDATE = (SELECT MIN(BIRTHDATE)
                     FROM DB2SAMPLE.EMP
                     WHERE WORKDEPT = P_DEPTNO);
    SET P_AGE = YEAR(CURRENT_DATE - MIN_BDATE);
end;

BEGIN
    DECLARE RESULT INT;
    DECLARE DEPTNO CHAR(3);
    SET DEPTNO = ?;
    CALL FN77777.PROC_GET_AGE_BY_DEPTNO(DEPTNO, RESULT);
    CALL DBMS_OUTPUT.PUT_LINE('OLD MAN: ' || DEPTNO || ' ' || RESULT);
end;

CREATE OR REPLACE PROCEDURE
    PROC_GET_OLD_MAN_INFO_BY_DEPTNO(IN P_DEPTNO CHAR(3))
    RESULT SETS 2
BEGIN
    DECLARE MIN_BDATE DATE;
    DECLARE C1 CURSOR WITH RETURN FOR
                           SELECT EMPNO, LASTNAME, BIRTHDATE, WORKDEPT
                           FROM DB2SAMPLE.EMP
                           WHERE BIRTHDATE = MIN_BDATE AND WORKDEPT = P_DEPTNO;

    DECLARE C2 CURSOR WITH RETURN FOR
                           SELECT DEPTNO, DEPTNAME
                           FROM DB2SAMPLE.DEPT
                           WHERE DEPTNO = P_DEPTNO;

    SET MIN_BDATE = (SELECT MIN(BIRTHDATE)
                     FROM DB2SAMPLE.EMP
                     WHERE WORKDEPT = P_DEPTNO);
   -- SET P_AGE = YEAR(CURRENT_DATE - MIN_BDATE);

    OPEN C1;
    OPEN C2;
end;
-- TODO  (3 SLIDES)
    CALL FN77777.PROC_GET_OLD_MAN_INFO_BY_DEPTNO(?);