//
// Created by Sybatron on 5/23/2022.
//
#include <iostream>

template<typename T>
void swap(T &elem1, T &elem2) {
    T temp;

}

template<typename T>
unsigned int indexMax(T *arr, int size) {

}

template<typename T>
unsigned int indexMin(T *arr, int size) {

}


int main() {
    std::cout << "HO";
    return 0;

}

/*Шаблони
        Вече знаем, че в програмирането винаги трябва да се стремим към писането на ефективен, максимално кратък и ясен код - това го прави по-устойчив на грешки, бъгове и неочаквано поведение, много по-лесен за поддръжка във времето и по-подлежащ на промени и модификации. Видяхме как чрез наследяване и виртуални методи можехме да накараме различни по тип обекти да предоставят общ, унифициран начин за работа със обектите от своя тип, където това беше нужно (и Manager, и Developer можеха да се клонират, и двата класа знаеха как да се принтират на конзолата, въпреки че ставаше по различен начин). Това постигнахме чрез т. нар. динамичен полимофизъм. Сега ще разгледаме следващият прост, но силен инструмент в ООП - Шаблони.

Задача 1 - шаблони на функции

        Да се напише шаблонна функция, която приема масив от неизвестен тип и връща негово копие с разменени
        най-големия и най-малкия му елемент. За целта създайте и шаблонни помощни функции:
void swap(T& elem1, T& elem2)
unsigned int indexMax(T* arr, int size)
unsigned int indexMin(T* arr, int size)
Задайте си въпроса за кои типове ще работят тези шаблони на функции. Ще работят ли за int? А за Developer от миналия път? Защо?

##Задача 2 - шаблони на класове

        Напишете шаблон на клас Point, който да описва една точка в двумерното пространство (равнината). За координати на една точка
        ще можем да имаме int, double, а ще можем да си използваме и Rational класа от предните седмици. Реализирайте оператори за вход и изход
от поток за Point;



Напишете и шаблон на клас Line, определен от две точки Point. Нека той има метод, който принтира общото уравнение на правата Line.*/