length(samples[samples>12800])/40
samples<-rnorm(n=40,mean=mu,sd=sigma)
#d 12800
length(samples[samples>12800])/40
#d 12800
length(samples[samples>12500])/40
samples<-rnorm(n=40,mean=mu,sd=sigma)
#d 12800
length(samples[samples>12500])/40
#d 12800
length(samples[samples>12000])/40
?norm
?qnorm
pnorm(0.75,mean=mu,sd=sigma)
qnorm(0.75,mean=mu,sd=sigma)
qnorm(0.75,mean=mu,sd=sigma)
qnorm(0.25,mean=mu,sd=sigma)
qnorm(0.25,mean=mu,sd=sigma)
qnorm(0.25,mean=mu,sd=sigma)
#Задача 5
?set.seed
set.seed(3000)
??random
?sample
rolls<-sample(1:6,size=1000)
rolls<-sample(1:6,size=1000,replace = TRUE)
rolls
cumulative_mean <- cumsum(rolls) / (1:1000)
cumulative_mean
plot(1:1000, cumulative_mean, type = "l", col = "blue",
xlab = "Брой хвърляния", ylab = "Кумулативна средна стойност",
main = "Закон за големите числа за средната стойност при хвърляне на зар")
# Добавяне на хоризонтална линия, показваща теоретичната средна стойност
abline(h = mean(1:6), col = "red", lty = 2)
# Добавяне на легенда
legend("topright", legend = c("Кумулативна средна стойност", "Теоретична средна стойност"),
col = c("blue", "red"), lty = c(1, 2))
rolls<-sample(1:6,size=1000,replace = TRUE)
cumulative_mean <- cumsum(rolls) / (1:1000)
plot(1:1000, cumulative_mean, type = "l", col = "blue",
xlab = "Брой хвърляния", ylab = "Кумулативна средна стойност",
main = "Закон за големите числа за средната стойност при хвърляне на зар")
# Добавяне на хоризонтална линия, показваща теоретичната средна стойност
abline(h = mean(1:6), col = "red", lty = 2)
# Добавяне на легенда
legend("topright", legend = c("Кумулативна средна стойност", "Теоретична средна стойност"),
col = c("blue", "red"), lty = c(1, 2))
?power
2^8
3!
factorial(3)
#Задача 6
calcSin <- function(n) {
sum<-0
for (i in 0:n) {
sum=sum+ (-1)^i/factorial(2*i+1)*x^(2*i+1)
}
}
calcSin(90)
#Задача 6
calcSin <- function(n) {
sum<-0
for (i in 0:n) {
sum=sum+ (-1)^i/factorial(2*i+1)*x^(2*i+1)
}
return sum
#Задача 6
calcSin <- function(n) {
sum<-0
for (i in 0:n) {
sum=sum+ (-1)^i/factorial(2*i+1)*x^(2*i+1)
}
sum
}
calcSin(90)
sum<-sum+ (-1)^i/factorial(2*i+1)*x^(2*i+1)
#Задача 6
calcSin <- function(n) {
sum<-0
for (i in 0:n) {
sum<-sum+ (-1)^i/factorial(2*i+1)*x^(2*i+1)
}
sum
}
calcSin(90)
#Задача 6
calcSin <- function(n) {
res<-0
for (i in 0:n) {
res<-res+ (-1)^i/factorial(2*i+1)*x^(2*i+1)
}
res
}
calcSin(90)
#Задача 6
calcSin <- function(n) {
res<-0
for (i in 0:n) {
res<-res+ (-1)^i/factorial(2*i+1)*x^(2*i+1)
}
sum(res)
}
calcSin(90)
calcSin(180)
calcSin(300)
calcSin(12)
#Задача 6
calcSin <- function(n) {
res<-0
for (i in 0:n) {
res<-res+ ((-1)^i/factorial(2*i+1))*x^(2*i+1)
}
sum(res)
}
calcSin(12)
calcSin(90)
calcSin(32)
calcSin(12)
calcSin(1)
#Задача 6
calcSin <- function(n) {
res<-0
for (i in 0:n) {
res<-res+ (((-1)^i)/factorial(2*i+1))*x^(2*i+1)
}
sum(res)
}
calcSin(1)
calcSin(10)
calcSin(50)
calcSin(90)
calcSin(1000)
calcSin(100)
#Задача 6
calcSin <- function(x,n) {
res<-0
for (i in 0:n) {
res<-res+ (-1)^i/factorial(2*i+1)*x^(2*i+1)
}
sum(res)
}
calcSin(x=3,n=9)
calcSin(x=90,n=9)
calcSin(x=30,n=9)
calcSin(x=3,n=9)
#Задача 7
x = c(15.1, 14.3, 9.5, 12.6, 16.2, 16.6, 10.2, 13.5, 8.5, 14, 31.6, 29.5, 23.6,
30.9, 29.4, 25.5, 19.3, 23.8, 30.6, 27.9, 21.4, 11.9, 21, 12.3, 17.4)
plot(x)
hist(x)
?t.test()
t.test(x)
shapiro.test(x)
mean(x)
median(x)
sd(x)
x2<-x+4
x2
mean(x2)
sd(x2)
hist(x)
shapiro.test(x)
shapiro.test(x)
qqnorm(x)
qqline(x, col = "red")
hist(x)
shapiro.test(x)
#4
length(x)
mean(x)
mu<-mean(x)
sigma<-sd(x)
sigma
t<-2.06
mu-t*sigma/sqrt(n)
#4
n<-length(x)
mu<-mean(x)
sigma<-sd(x)
sigma
t<-2.06
mu-t*sigma/sqrt(n)
mu+t*sigma/sqrt(n)
mu<-mean(x)
му
mu
#5
mu+sigma/sqrt(n)
#5
mu-sigma/sqrt(n)
mu<-mean(x)
mu
#5
(22.55-16.38)/2
2*0.8413-1
barplot(summary_table, beside = TRUE,
col = c("red"),
legend = c("Died"),
main = "Survival Counts by Gender",
xlab = "Gender",
ylab = "Count",
names.arg = rownames(summary_table))
barplot(summary_table, beside = FALSE,
col = c("red"),
legend = c("Died"),
main = "Survival Counts by Gender",
xlab = "Gender",
ylab = "Count",
names.arg = rownames(summary_table))
barplot(summary_table, beside = TRUE,
col = c("red"),
legend = c("Died"),
main = "Survival Counts by Gender",
xlab = "Gender",
ylab = "Count",
names.arg = rownames(summary_table))
summary_table <- table(passangers[, "Sex","Survived"])
barplot(summary_table, beside = TRUE,
col = c("red","blue"),
legend = c("Died","Survived"),
main = "Survival Counts by Gender",
xlab = "Gender",
ylab = "Count",
names.arg = rownames(summary_table))
summary_table
summary_table <- table(passangers[, "Sex","Survived"])
summary_table <- table(passangers[, c("Sex","Survived")])
summary_table
barplot(summary_table, beside = TRUE,
col = c("red","blue"),
legend = c("Died","Survived"),
main = "Survival Counts by Gender",
xlab = "Gender",
ylab = "Count",
names.arg = rownames(summary_table))
barplot(summary_table, beside = FALSE,
col = c("red","blue"),
legend = c("Died","Survived"),
main = "Survival Counts by Gender",
xlab = "Gender",
ylab = "Count",
names.arg = rownames(summary_table))
TRUE
barplot(summary_table, beside = TRUE,
col = c("red","blue"),
legend = c("Died","Survived"),
main = "Survival Counts by Gender",
xlab = "Gender",
ylab = "Count",
names.arg = rownames(summary_table))
?barplot
#Verzani Problem Set
#14.1
homeprice
#Verzani Problem Set
#14.1
data(homeprice)
load(homeprice)
ls()
load("homeprice")
libary(UsingR)
libary(UsingR)
libary("UsingR")
library("UsingR")
ls()
homeprice
?UsingR
??UsingR
homeprice
plot(homeprice$sale~homeprice$half)
plot(homeprice$half`homeprice$sale)
plot(homeprice$half~homeprice$sale)
plot(homeprice$half~homeprice$sale)
plot(homeprice$sale)
plot(homeprice$sale)
plot(homeprice$sale)
homeprice
3.
plot(homeprice$sale)
homeprice
q
da
da
g)
dada
2+2
plot(homeprice$sale)
plot(homeprice$half~homeprice$sale)
barplot(homeprice$half~homeprice$sale)
barplot(homeprice$half,homeprice$sale)
boxplot(homeprice$half,homeprice$sale)
boxplot(homeprice$sale,homeprice$half)
?hist
head(homeprice)
attach(homeprice)
modelPriceBathroom <- lm(sale ~ half)
modelPriceBathroom
plot(half, sale)
abline(lm(sale ~ half))
modelPriceBathroom <- lm(sale ~ half)
lm(sale ~ half)
summary(modelPriceBathroom)
combn(10,2)
length(combn(10,2))
length(combn(10,2))*(1/4)^2*(3/4)^8
dbinom(x=2,size=10,prob=1/4)
dbinom(x=2,size=10,prob=1/4)
#5 0.6826
(22.55-16.38)/2
#5 >1 Пика
length(samples[samples>1])/100
qbinom(p=0.75,size=10,prob=1/4)
qbinom(p=0.75,size=10,prob=1/4,lower.tail = FALSE)
?qbinom
#5 >2 Пика
qbinom(p=0.75,size=10,prob=1/4,lower.tail = FALSE)
#5 >2 Пика
1-qbinom(p=0.75,size=10,prob=1/4)
#5 >2 Пика
qbinom(p=0.75,size=10,prob=1/4,lower.tail = FALSE)
#5 >2 Пика
qbinom(p=0.25,size=10,prob=1/4,lower.tail = TRUE)
lm(sale ~ half)
modelPriceBathroom
plot(half, sale)
abline(lm(sale ~ half))
summary(modelPriceBathroom)
plot(lm(sale ~ half))
#14.2
lm(sale~half)
#14.2
summary(lm(sale~half))
set.seed(3000)
rolls<-sample(1:6,size=1000,replace = TRUE)
cumulative_mean <- cumsum(rolls) / (1:1000)
plot(1:1000, cumulative_mean, type = "l", col = "blue",
xlab = "Брой хвърляния", ylab = "Кумулативна средна стойност",
main = "Закон за големите числа за средната стойност при хвърляне на зар")
# Добавяне на хоризонтална линия, показваща теоретичната средна стойност
abline(h = mean(1:6), col = "red", lty = 2)
# Добавяне на легенда
legend("topright", legend = c("Кумулативна средна стойност", "Теоретична средна стойност"),
col = c("blue", "red"), lty = c(1, 2))
rolls<-sample(1:6,size=1000,replace = TRUE)
cumulative_mean <- cumsum(rolls) / (1:1000)
?cumsum
cumulative_mean
plot(1:1000, cumulative_mean, type = "l", col = "blue",
xlab = "Брой хвърляния", ylab = "Кумулативна средна стойност",
main = "Закон за големите числа за средната стойност при хвърляне на зар")
# Добавяне на хоризонтална линия, показваща теоретичната средна стойност
abline(h = mean(1:6), col = "red", lty = 2)
# Добавяне на легенда
legend("topright", legend = c("Кумулативна средна стойност", "Теоретична средна стойност"),
col = c("blue", "red"), lty = c(1, 2))
rolls<-sample(1:6,size=1000,replace = TRUE)
?cumsum
cumulative_mean <- cumsum(rolls) / (1:1000)
cumulative_mean
plot(1:1000, cumulative_mean, type = "l", col = "blue",
xlab = "Брой хвърляния", ylab = "Кумулативна средна стойност",
main = "Закон за големите числа за средната стойност при хвърляне на зар")
# Добавяне на хоризонтална линия, показваща теоретичната средна стойност
abline(h = mean(1:6), col = "red", lty = 2)
# Добавяне на легенда
legend("topright", legend = c("Кумулативна средна стойност", "Теоретична средна стойност"),
col = c("blue", "red"), lty = c(1, 2))
set.seed(3000)
rolls<-sample(1:6,size=1000,replace = TRUE)
?cumsum
cumulative_mean <- cumsum(rolls) / (1:1000)
cumulative_mean
plot(1:1000, cumulative_mean, type = "l", col = "blue",
xlab = "Брой хвърляния", ylab = "Кумулативна средна стойност",
main = "Закон за големите числа за средната стойност при хвърляне на зар")
# Добавяне на хоризонтална линия, показваща теоретичната средна стойност
abline(h = mean(1:6), col = "red", lty = 2)
# Добавяне на легенда
legend("topright", legend = c("Кумулативна средна стойност", "Теоретична средна стойност"),
col = c("blue", "red"), lty = c(1, 2))
?plot
?plot
mu+t*sigma/sqrt(n)
2*0.8413-1
#5 0.6826
(22.55-16.38)/2
#5 0.6826
(22.55-16.38)/2
sigma
# 3.085
?qt
2*0.8413-1
#5 0.6826
(22.55-16.38)/2
length(x)
install.packages("faraway")
library(faraway)
library(faraway)
savings
install.packages("faraway")
rm(list=ls())
library(faraway)
library(faraway)
library(faraway)
install.packages("installr")
library(installr)
updater()
updateR()
library(faraway)
install.packages("faraway")
install.packages("ggplot2")
install.packages("lmtest")
install.packages("dplyr")
update.packages()
library(faraway)
plot(savings)
head(savings)
?savings
head(savings)
plot(savings)
plot(savings$pop15,savings$dpi)
aggregate(savings$dpi~savings$pop15,FUN=function(x) shapiro.test(x))
savings
aggregate(savings$dpi~savings$pop15,FUN=function(x) {shapiro.test(x)})
aggregate(savings$dpi~savings$pop15,FUN=function(x) {shapiro.test(x)})
aggregate(savings$dpi~savings$pop15,FUN=function(x) {shapiro.test(x)$p.value})
aggregate(dpi~pop15,data=savings,FUN=function(x) {shapiro.test(x)$p.value})
aggregate(dpi~pop15,data=savings,FUN=function(x) {shapiro.test(x)$p.value})
?savings
aggregate(dpi~pop15,data=savings,FUN=function(x) {shapiro.test(x)$p.value})
aggregate(dpi~pop15,data=savings,FUN=function(x) {shapiro.test(x)$p.value})
library(faraway)
plot(savings)
head(savings)
?savings
plot(savings$pop15,savings$dpi)
aggregate(dpi~pop15,data=savings,FUN=function(x) {shapiro.test(x)$p.value})
aggregate(dpi~pop15,data=savings,FUN=function(x) {wilcox.test(x)$p.value})
aggregate(dpi~pop15,data=savings,FUN=function(x) {wilcox.test(x)})
aggregate(dpi~pop15,data=savings,FUN=function(x) {wilcox.test(x)$p.value})
aggregate(dpi~pop15,data=savings,FUN=function(x) {kruskal.test(x)$p.value})
aggregate(dpi~pop15,data=savings,FUN=function(x) {kruskal.test(x)})
x
aggregate(dpi~pop15,data=savings,FUN=function(x) {
x
shapiro.test(x)$p.value})
aggregate(pop15~dpi,data=savings,FUN=function(x) {shapiro.test(x)$p.value})
aggregate(dpi~pop15,data=savings,FUN=function(x) {shapiro.test(x)$p.value})
savings
aggregate(dpi~pop15,data=savings,FUN=function(x) {if(length(x) >= 3) {
return(shapiro.test(x)$p.value)
} else {
return(NA)  # Return NA if the group has fewer than 3 observations
}})
?hist
tb<-table(savings$dpi,savings$pop15)
hist(tb)
tb
tb<-data.frame(savings$dpi,savings$pop15)
tb
hist(tb)
str(savings)
plot(savings)
plot(savings$pop15,savings$dpi)
abline(savings$dpi~savings$pop15)
abline(lm(savings$dpi~savings$pop15))
curve(lm(savings$dpi~savings$pop15))
abline(lm(savings$dpi~savings$pop15))
abline(lm(dpi~pop15,data=savings))
plot(pop15,dpi,data=savings)
?plot
plot(savings$pop15,savings$dpi)
abline(lm(dpi~pop15,data=savings))
summary(lm(dpi~pop15,data=savings))
?pairwise.wilcox.test()
smoking = sample(c("Yes","No"), size = 50, replace=TRUE)
grades=sample(2:6,size=50,replace=TRUE)
df=data.frame(smoking,grades)
df$smoking<-as.factor(df$smoking)
df
as.factor(df$smoking)
df
str(df)
pairwise.wilcox.test(df)
pairwise.wilcox.test(df$smoking,df$grades)
pairwise.wilcox.test(df$grades,df$smoking)
wilcox.test(df$grades,df$smoking)
wilcox.test(df$grades,df$smoking)
wilcox.test(df)
wilcox.test(df$grades,df$smoking)
wilcox.test(df$smoking,df$grades)
wilcox.test(df$smoking,df$grades)
wilcox.test(df$smoking,df$grades)
wilcox.test(df$smoking,df$grades)
df$smoking<-as.numeric(df$smoking)
wilcox.test(df$smoking,df$grades)
wilcox.test(df$grades,df$smoking)
df
?wilcox.test(df$grades,df$smoking)
datasets::co2
datasets::islands
datasets::AirPassengers
datasets::airmiles
datasets::women
?rbinom
rbinom(10,size = 300,prob=0.3)
rbinom(10,size = 300,prob=0.3)
rbinom(10,size = 300,prob=0.3)
rbinom(10,size = 25,prob=0.3)
rbinom(300,size = 10,prob=0.3)
rbinom(300,size = 10,prob=0.3)/10
rbinom(300,size = 10,prob=0.3)
